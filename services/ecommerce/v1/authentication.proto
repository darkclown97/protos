syntax = "proto3";

package services.auth;

import "common/messages.proto";

option go_package = "github.com/darkclown97/api/services/ecommerce/v1/authentication";

service AuthService {
  // Register - creates a new user account and returns a JWT token
  rpc Register(RegisterRequest) returns (LoginResponse);

  // Login - returns a JWT token for the provided credentials
  rpc Login(LoginRequest) returns (LoginResponse);

  // RefreshToken - returns a new JWT token using a valid refresh token
  rpc RefreshToken(RefreshTokenRequest) returns (LoginResponse);

  // Logout - optional method to invalidate a refresh token (revocation/blacklist)
  rpc Logout(LogoutRequest) returns (LogoutResponse);

  // Forgot Password - sends a reset link or token to the user
  rpc ForgotPassword(ForgotPasswordRequest) returns (ForgotPasswordResponse);

  // Reset Password - updates the user's password using a valid token
  rpc ResetPassword(ResetPasswordRequest) returns (ResetPasswordResponse);

  // UpdateProfile - updates user profile information
  rpc UpdateProfile(UpdateProfileRequest) returns (UpdateProfileResponse);
}

// User type - Determines the role of the user
enum UserType {
  UNKNOWN = 0;
  BUYER = 1;
  SELLER = 2;
}

message BuyerAddresses {
  repeated string dropoff_addresses = 1;
}

message SellerAddresses {
  repeated string pickup_addresses = 1;
}

// Login Request - User credentials
message LoginRequest {
  oneof login_credential {
    string email = 1;       // For users logging in with email
    string phone = 2; // For users logging in with phone number
  }
  string password = 3;
}

message AuthTokens {
  string token = 1;
  string refresh_token = 2;
}

// Login Response - Contains JWT token
message LoginResponse {
  oneof result {
    AuthTokens tokens = 1;
    string error = 2;
  }
}

// Refresh Token Request - Uses refresh token to get a new access token
message RefreshTokenRequest {
  // Empty request as refresh_token is sent via cookies
}

// Logout Request - Request to invalidate the token
message LogoutRequest {
  // Empty response as token is sent via cookies
}

// Logout Response - Acknowledges successful token invalidation
message LogoutResponse {
  bool success = 1;
}

// Register Request - User registration details
message RegisterRequest {
  string name = 1;
  string email = 2;
  string password = 3;
  string phone = 4;
  string address = 5;
  oneof addresses {
    SellerAddresses seller_addresses = 6;
    BuyerAddresses buyer_addresses = 7;
  }
}

// Forgot Password Request
message ForgotPasswordRequest {
  string email = 1; // User's email for sending reset link or token
}

// Forgot Password Response
message ForgotPasswordResponse {
  bool success = 1; // Indicates if the request was successful
  string message = 2; // Optional user-friendly message
}

// Reset Password Request
message ResetPasswordRequest {
  string reset_token = 1; // Token received from ForgotPassword
  string new_password = 2; // New password to set
}

// Reset Password Response
message ResetPasswordResponse {
  bool success = 1; // Indicates if the password was successfully reset
  string message = 2; // Optional user-friendly message
}

// Buyer Profile fields
message UpdateProfileRequest {
  string name = 1;
  string email = 2;
  string phone = 3;
  string address = 4;
  oneof addresses {
    SellerAddresses seller_addresses = 5;
    BuyerAddresses buyer_addresses = 6;
  }
}

// Update Profile Response
message UpdateProfileResponse {
  bool success = 1;
  string message = 2;
}

// Only for internal use
message BuyerInternal {
  common.messages.Meta meta = 1;
  string name = 2;
  string email = 3;
  string password = 4;
  string phone = 5;
  string primary_address = 6;
  repeated string delivery_addresses = 7;
}

message SellerInternal {
  common.messages.Meta meta = 1;
  string name = 2;
  string email = 3;
  string password = 4;
  string phone = 5;
  string primary_address = 6;
  repeated string pickup_addresses = 7;
}